var searchIndex = JSON.parse('{\
"sudoku":{"doc":"sudoku-solver","t":"AAAADDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNDDDNENNNNDEDDIENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLL","n":["cell","error","grid","size","Cell","CellNumber","borrow","borrow","borrow_mut","borrow_mut","cell_number","clone","clone","clone_into","clone_into","cmp","cmp","default","default","deserialize","deserialize","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","hash","hash","into","into","is_in_bound","new","new_empty","new_hint","new_opt","number","partial_cmp","partial_cmp","serialize","serialize","set_number","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ExampleError","NoneError","SetError","ValueOutOfBounds","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","deserialize","deserialize","eq","eq","fmt","fmt","fmt","fmt","from","from","hash","hash","into","into","partial_cmp","partial_cmp","provide","provide","serialize","serialize","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BackTracePositionTracker","Backward","CellCoordinate","CellPosition","Column","Complete","Direction","Forward","HintInconsistency","ImpossibleConfiguration","Incomplete","Row","SolveError","Square","Sudoku","SudokuIter","VerificationError","VerificationError","VerificationResult","WrongGuess","WrongSolution","bitand","bitor","bitxor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","columns","default","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","get_cell","get_cell_mut","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","index","index_mut","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_in_bound","iter","iter_mut","move_pos","new","new","new","new","new","new","new","new_from_number","next","next","next","next","next_element","number","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","previous","provide","provide","random","rows","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","set_number","size_hint","size_hint","size_hint","size_hint","solve_back_trace","source","squares","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_solve","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify_configuration","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","x","x_mut","x_usize","y","y_mut","y_usize","GameSize","borrow","borrow_mut","cell_number","clone","clone_into","cmp","default","deserialize","eq","fmt","from","game_size","hash","into","new","new_square_size","partial_cmp","serialize","square_size","to_owned","try_from","try_into","type_id","vzip"],"q":[[0,"sudoku"],[4,"sudoku::cell"],[58,"sudoku::error"],[104,"sudoku::grid"],[393,"sudoku::size"]],"d":["contain cell and cell states","Module containing the differents error","Contain the main utility for <code>Sudoku</code>","Module for the <code>GameSize</code> which define the size of the game","Reprensent a cell in a <code>crate::grid::Sudoku</code>","Represent a number that a cell can hold. Can only hold 1 …","","","","","Return the cell number or None if it is empty","","","","","","","","Create a <code>CellNumber</code> with value 1","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Test if the given value is in bounds","Create a new cell number. the input should be &lt;= [<code>GAME_SIZE</code>…","Create a new empty cell","Create a cell with a given hint","Create eithen a given or an empty configurazion","Get the nnumber contained.","","","","","Try set the number inside this, returns an error is the …","","","","","","","","","","","","Error used in examples","None on option","Error used in examples","the value is out of bounds.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","An iterator that can move forward or backwward. It is used …","Backward direction i.e. <code>-1</code>","Represent a coordinate on a <code>crate::grid::Sudoku</code> grid. It …","Represent a <code>crate::cell::Cell</code> position on a …","Column iterator of a <code>crate::grid::Sudoku</code>. It iterate over …","Complete configuration","Represent either a forward or backward direction","Forward direction i.e. <code>+1</code>","Inconsitency in the hints","Ther is no solution for this configuration","Incomplete configuration","Row iterator of a <code>crate::grid::Sudoku</code>. It iterate over the …","Error returned by <code>Sudoku::solve_back_trace</code>","Square iterator of a <code>crate::grid::Sudoku</code>.","Represent the grid with the cell and the current game state","This trait cannot be implemented outside the crate as it …","Error of a Sudoku configuration, the first cell position …","Verification error, the grid is inconsistant","Contain a verification sucess but either for a complete …","A Guess is wrong","A solution is wrong","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","returns all columns.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Get a reference to the cell at the given position","Get a mut reference to the cell at the given position","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Test if the given value is in bounds","Create a iterators on all cells","Create a iterators on all cells with a mut reference","Move the position in a certain direction. Returns <code>None</code> if …","Create a iterator of the row at the given position.","Create a iterator of the column at the given position.","Create a iterator of the square at the given position.","Create a new tracker stating on the fist ellement","Create a new cell number. the input should be <code>&lt; 10</code> …","Create a new position.","Create a configuration with the given array, number 0 ore …","Try create a new <code>CellPosition</code> from 2 usize","","","","","Get the next position see …","Get the nnumber contained.","","","","","","","","","","","","Get the previous position, see …","","","Create an empty config with <code>number_of_hints</code> randoms hints","Returns all rows.","","","","","","","","","","","","Try set the number inside this, returns an error is the …","","","","","Solve using the backtrace methode","","returns all squares","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Try solve the system by using deducting method","","","","","","","","","","","","Verifiy if the configuration is correcte.","","","","","","","","","","","","Get the x coord.","Get the x coord as mut.","Get the x coord as a <code>usize</code>.","Get the y coord.","Get the y coord as mut.","Get the y coord as a <code>usize</code>.","Represent a game size","","","Get the number of cell in total","","","","Returns the classic 9X9 grid","","","","Returns the argument unchanged.","Get the game size","","Calls <code>U::from(self)</code>.","Try to create a game size from the input number, only …","Create a gme size form a square size, the total number of …","","","Get the square size","","","","",""],"i":[0,0,0,0,0,0,1,2,1,2,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,2,2,2,2,2,1,2,1,2,1,2,2,2,1,1,1,2,1,2,1,2,2,1,2,2,1,2,1,2,1,2,1,2,0,16,0,13,16,13,16,13,16,13,16,13,16,13,16,13,16,13,16,16,13,13,16,13,16,13,16,13,16,13,16,13,16,13,16,13,16,13,16,13,16,13,16,13,16,13,0,22,0,0,0,18,0,22,27,28,18,0,0,0,0,0,0,28,0,27,27,18,18,18,19,20,21,22,23,24,25,26,27,28,18,19,20,21,22,23,24,25,26,27,28,18,19,20,21,22,23,24,25,26,27,28,18,19,20,21,22,23,24,25,26,27,28,18,19,20,21,22,23,24,25,26,27,28,18,26,19,20,21,23,24,25,19,20,21,22,23,24,25,26,27,28,18,19,20,21,22,23,24,25,26,27,28,18,19,20,21,22,23,24,24,25,25,26,26,27,27,28,28,18,19,20,21,22,23,24,25,26,27,28,28,18,26,26,19,20,21,22,23,24,25,26,27,28,18,26,26,19,20,21,22,23,24,25,26,27,28,18,19,20,21,23,26,26,24,26,26,23,19,20,21,23,24,25,26,25,19,20,21,23,23,24,19,20,21,22,23,24,25,26,27,28,18,23,27,28,26,26,19,20,21,22,23,24,25,26,27,28,18,24,19,20,21,23,26,28,26,19,20,21,22,23,24,25,26,27,28,18,24,25,26,27,28,19,20,21,22,23,24,25,26,27,28,18,19,20,21,22,23,24,25,26,27,28,18,26,19,20,21,22,23,24,25,26,27,28,18,26,19,20,21,22,23,24,25,26,27,28,18,25,25,25,25,25,25,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[1,1],[2,2],[[]],[[]],[[1,1],4],[[2,2],4],[[],1],[[],2],[5,[[6,[1]]]],[5,[[6,[2]]]],[[1,1],7],[[2,2],7],[[1,8],9],[[2,8],9],[[2,8],9],[[2,8],9],[[2,8],9],[[2,8],9],[[2,8],9],[[]],[[]],[[1,10]],[[2,10]],[[]],[[]],[11,7],[11,[[3,[2]]]],[[],1],[2,1],[[[3,[2]]],1],[2,11],[[1,1],[[3,[4]]]],[[2,2],[[3,[4]]]],[[1,12],6],[[2,12],6],[[2,11],[[6,[13]]]],[[]],[[]],[[],14],[[],6],[[],6],[[],6],[[],6],[[],15],[[],15],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[16,16],[13,13],[[]],[[]],[[16,16],4],[[13,13],4],[5,[[6,[16]]]],[5,[[6,[13]]]],[[16,16],7],[[13,13],7],[[16,8],9],[[16,8],9],[[13,8],9],[[13,8],9],[[]],[[]],[[16,10]],[[13,10]],[[]],[[]],[[16,16],[[3,[4]]]],[[13,13],[[3,[4]]]],[17],[17],[[16,12],6],[[13,12],6],[[]],[[]],[[],14],[[],14],[[],6],[[],6],[[],6],[[],6],[[],15],[[],15],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[18,18]],[[18,18]],[[18,18]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,19],[20,20],[21,21],[22,22],[23,23],[24,24],[25,25],[26,26],[27,27],[28,28],[18,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[19,19],4],[[20,20],4],[[21,21],4],[[22,22],4],[[23,23],4],[[24,24],4],[[25,25],4],[[26,26],4],[[27,27],4],[[28,28],4],[[18,18],4],[[]],[[],19],[[],20],[[],21],[[],23],[[],24],[[],25],[5,[[6,[19]]]],[5,[[6,[20]]]],[5,[[6,[21]]]],[5,[[6,[22]]]],[5,[[6,[23]]]],[5,[[6,[24]]]],[5,[[6,[25]]]],[5,[[6,[26]]]],[5,[[6,[27]]]],[5,[[6,[28]]]],[5,[[6,[18]]]],[[19,19],7],[[20,20],7],[[21,21],7],[[22,22],7],[[23,23],7],[[24,24],7],[[25,25],7],[[26,26],7],[[27,27],7],[[28,28],7],[[18,18],7],[[19,8],9],[[20,8],9],[[21,8],9],[[22,8],9],[[23,8],9],[[24,8],9],[[24,8],9],[[25,8],9],[[25,8],9],[[26,8],9],[[26,8],9],[[27,8],9],[[27,8],9],[[28,8],9],[[28,8],9],[[18,8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,28],[[]],[[]],[[26,25],1],[[26,25],1],[[19,10]],[[20,10]],[[21,10]],[[22,10]],[[23,10]],[[24,10]],[[25,10]],[[26,10]],[[27,10]],[[28,10]],[[18,10]],[[26,25]],[[26,25]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26],[26],[11,7],[26,[[0,[29,30,31]]]],[26,[[0,[29,30,31]]]],[[23,22],[[3,[25]]]],[25,19],[25,20],[25,21],[[],23],[11,[[3,[24]]]],[[24,24],25],[[],26],[[11,11],[[3,[25]]]],[19,3],[20,3],[21,3],[23,3],[23,[[3,[25]]]],[24,11],[[19,19],[[3,[4]]]],[[20,20],[[3,[4]]]],[[21,21],[[3,[4]]]],[[22,22],[[3,[4]]]],[[23,23],[[3,[4]]]],[[24,24],[[3,[4]]]],[[25,25],[[3,[4]]]],[[26,26],[[3,[4]]]],[[27,27],[[3,[4]]]],[[28,28],[[3,[4]]]],[[18,18],[[3,[4]]]],[23,[[3,[25]]]],[17],[17],[[11,32],[[3,[26]]]],[[]],[[19,12],6],[[20,12],6],[[21,12],6],[[22,12],6],[[23,12],6],[[24,12],6],[[25,12],6],[[26,12],6],[[27,12],6],[[28,12],6],[[18,12],6],[[24,11],[[6,[13]]]],[19],[20],[21],[23],[26,[[6,[28]]]],[28,[[3,[33]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],14],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[26,[[6,[18,27]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[26,[[6,[18,27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,24],[25,24],[25,11],[25,24],[25,24],[25,11],0,[[]],[[]],[34,11],[34,34],[[]],[[34,34],4],[[],34],[5,[[6,[34]]]],[[34,34],7],[[34,8],9],[[]],[34,11],[[34,10]],[[]],[11,[[3,[34]]]],[11,34],[[34,34],[[3,[4]]]],[[34,12],6],[34,11],[[]],[[],6],[[],6],[[],15],[[]]],"c":[],"p":[[3,"Cell"],[3,"CellNumber"],[4,"Option"],[4,"Ordering"],[8,"Deserializer"],[4,"Result"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[15,"usize"],[8,"Serializer"],[4,"SetError"],[3,"String"],[3,"TypeId"],[4,"ExampleError"],[3,"Demand"],[4,"VerificationResult"],[3,"Row"],[3,"Column"],[3,"Square"],[4,"Direction"],[3,"BackTracePositionTracker"],[3,"CellCoordinate"],[3,"CellPosition"],[3,"Sudoku"],[4,"VerificationError"],[4,"SolveError"],[8,"Iterator"],[8,"FusedIterator"],[8,"DoubleEndedIterator"],[8,"Rng"],[8,"Error"],[3,"GameSize"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
